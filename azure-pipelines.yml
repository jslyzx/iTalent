# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

# Set variables once
variables:
  imageTag: 'cr-p-001-registry.cn-hangzhou.cr.aliyuncs.com/dev/icommunity-$(Build.SourceBranchName):$(Build.BuildNumber)'
  label: icommunity-$(Build.SourceBranchName)
  repos: dev
  namespace: hr-update
  npm_config_cache: $(Pipeline.Workspace)/.npm
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'

steps:
  - task: Bash@3
    displayName: 'update deployment.yaml'
    inputs:
      targetType: 'inline'
      script: |
        sed -i 's/@image@/icommunity-$(Build.SourceBranchName):$(Build.BuildNumber)/g;s/@repos@/$(repos)/g;s/@namespace@/$(namespace)/g;s/@label@/$(label)/g' deployment.yaml
      workingDirectory: './'

  - task: Bash@3
    displayName: 'check deoplyment file'
    inputs:
      targetType: 'inline'
      script: "cat deployment.yaml"
      workingDirectory: './'

  - task: CacheBeta@0
    inputs:
      key: yarn | $(Agent.OS) | yarn.lock
      path: $(YARN_CACHE_FOLDER)
    displayName: Cache yarn

  - task: NodeTool@0
    inputs:
      versionSpec: '12.x'
    displayName: 'Install Node.js'

  - script: |
      yarn add
      yarn run build
    displayName: 'yarn add and build'

  - task: Docker@0
    displayName: 'Build an image'
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryConnection: 'CR@wp001'
      dockerFile: '**/dockerfile'
      imageName: $(imageTag)

  - task: Docker@0
    displayName: 'Push an image'
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryConnection: 'CR@wp001'
      action: 'Push an image'
      imageName: $(imageTag)

  - task: Kubernetes@1
    displayName: 'deploy to k8s'
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: 'k8s@wp001'
      command: 'apply'
      useConfigurationFile: true
      configuration: './deployment.yaml'
      arguments: '--insecure-skip-tls-verify'
      secretType: 'dockerRegistry'
      containerRegistryType: 'Container Registry'
      dockerRegistryEndpoint: 'CR@wp001'

